{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/components/Table.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  const result = await fetch(\"http://localhost:8080/v1/graphql\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName\n    })\n  });\n  return await result.json();\n}\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\nfunction fetchGetCustomers() {\n  return fetchGraphQL(operationsDoc, \"GetCustomers\", {});\n}\nconst startFetchGetCustomers = async () => {\n  const {\n    errors,\n    data\n  } = await fetchGetCustomers();\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n};\nexport const Table = () => {\n  // const { data, error } = useContext(DataContext)\n  // console.log(data, error)\n  // const headers: any[] = data ? Object.keys(data[0]) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tableContainer\",\n    style: {\n      color: 'black'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"tr\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","fetchGraphQL","operationsDoc","operationName","variables","result","fetch","method","body","JSON","stringify","query","json","fetchGetCustomers","startFetchGetCustomers","errors","data","console","error","customers","Table","color"],"sources":["/Users/kerj/Projects/gql-hasura/src/components/Table.tsx"],"sourcesContent":["import React, { useContext } from 'react'\nimport { DataContext } from '../Context/DataContext';\n\nasync function fetchGraphQL(operationsDoc: any, operationName: any, variables: any) {\n  const result = await fetch(\n    \"http://localhost:8080/v1/graphql\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName\n      })\n    }\n  );\n\n  return await result.json();\n}\n\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\n\nfunction fetchGetCustomers() {\n  return fetchGraphQL(\n    operationsDoc,\n    \"GetCustomers\",\n    {}\n  );\n}\n\nconst startFetchGetCustomers = async (): Promise<any[]> => {\n  const { errors, data } = await fetchGetCustomers();\n\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n}\n\nexport const Table = () => {\n  // const { data, error } = useContext(DataContext)\n  // console.log(data, error)\n  // const headers: any[] = data ? Object.keys(data[0]) : [];\n  return (\n    <div className='tableContainer' style={{ color: 'black' }}>\n      {\n        <table className='table'>\n          <thead>\n            <tr className='tr'>\n              {/* {headers.map(header => (<th>{header}</th>))} */}\n            </tr>\n          </thead>\n          <tbody>\n            {/* {\n              (data).map((row, index) => (\n                <tr key={index}>\n                  {headers.map((header, ind) => (\n                    <td key={ind} className=\"td\">\n                      {row[header]}\n                    </td>\n                  ))}\n                </tr>\n              ))\n            } */}\n          </tbody>\n        </table>\n      }\n    </div>\n  )\n}\n\nexport default Table;"],"mappings":";AAAA,OAAOA,KAAK,MAAsB,OAAO;AAAA;AAGzC,eAAeC,YAAY,CAACC,aAAkB,EAAEC,aAAkB,EAAEC,SAAc,EAAE;EAClF,MAAMC,MAAM,GAAG,MAAMC,KAAK,CACxB,kCAAkC,EAClC;IACEC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAET,aAAa;MACpBE,SAAS,EAAEA,SAAS;MACpBD,aAAa,EAAEA;IACjB,CAAC;EACH,CAAC,CACF;EAED,OAAO,MAAME,MAAM,CAACO,IAAI,EAAE;AAC5B;AAEA,MAAMV,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASW,iBAAiB,GAAG;EAC3B,OAAOZ,YAAY,CACjBC,aAAa,EACb,cAAc,EACd,CAAC,CAAC,CACH;AACH;AAEA,MAAMY,sBAAsB,GAAG,YAA4B;EACzD,MAAM;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMH,iBAAiB,EAAE;EAElD,IAAIE,MAAM,EAAE;IACVE,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;EACvB;EACA;EACA,OAAOC,IAAI,CAACA,IAAI,CAACG,SAAS;AAC5B,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAM;EACzB;EACA;EACA;EACA,oBACE;IAAK,SAAS,EAAC,gBAAgB;IAAC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAQ,CAAE;IAAA,uBAEtD;MAAO,SAAS,EAAC,OAAO;MAAA,wBACtB;QAAA,uBACE;UAAI,SAAS,EAAC;QAAI;UAAA;UAAA;UAAA;QAAA;MAEb;QAAA;QAAA;QAAA;MAAA,QACC,eACR;QAAA;QAAA;QAAA;MAAA,QAYQ;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QAEN;AAEV,CAAC;AAAA,KA9BYD,KAAK;AAgClB,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}