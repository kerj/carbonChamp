{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/components/Table.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport { DataContext } from '../Context/DataContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  const result = await fetch(\"http://localhost:8080/v1/graphql\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName\n    })\n  });\n  return await result.json();\n}\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\nfunction fetchGetCustomers() {\n  return fetchGraphQL(operationsDoc, \"GetCustomers\", {});\n}\nconst startFetchGetCustomers = async () => {\n  const {\n    errors,\n    data\n  } = await fetchGetCustomers();\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n};\nexport const Table = () => {\n  _s();\n  var _data$data;\n  const {\n    data,\n    error,\n    isLoading\n  } = useContext(DataContext);\n  console.log(data, error, isLoading);\n  const headers = data !== null && data !== void 0 && (_data$data = data.data) !== null && _data$data !== void 0 && _data$data.customers ? Object.keys(data[0]) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tableContainer\",\n    style: {\n      color: 'black'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"tr\",\n          children: headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 39\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data && data.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headers.map((header, ind) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"td\",\n            children: row[header]\n          }, ind, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 21\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"v4vUzj8gfKV83pHYPpjBg8WnoLA=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useContext","DataContext","fetchGraphQL","operationsDoc","operationName","variables","result","fetch","method","body","JSON","stringify","query","json","fetchGetCustomers","startFetchGetCustomers","errors","data","console","error","customers","Table","isLoading","log","headers","Object","keys","color","map","header","row","index","ind"],"sources":["/Users/kerj/Projects/gql-hasura/src/components/Table.tsx"],"sourcesContent":["import React, { useContext } from 'react'\nimport { DataContext } from '../Context/DataContext';\n\nasync function fetchGraphQL(operationsDoc: any, operationName: any, variables: any) {\n  const result = await fetch(\n    \"http://localhost:8080/v1/graphql\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName\n      })\n    }\n  );\n\n  return await result.json();\n}\n\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\n\nfunction fetchGetCustomers() {\n  return fetchGraphQL(\n    operationsDoc,\n    \"GetCustomers\",\n    {}\n  );\n}\n\nconst startFetchGetCustomers = async (): Promise<any[]> => {\n  const { errors, data } = await fetchGetCustomers();\n\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n}\n\nexport const Table = () => {\n  const { data, error, isLoading } = useContext(DataContext)\n  console.log(data, error, isLoading)\n\n  const headers: any[] = data?.data?.customers ? Object.keys(data[0]) : [];\n  return (\n    <div className='tableContainer' style={{ color: 'black' }}>\n      {\n        <table className='table'>\n          <thead>\n            <tr className='tr'>\n              {headers.map(header => (<th>{header}</th>))}\n            </tr>\n          </thead>\n          <tbody>\n            { data &&\n              data.map((row, index) => (\n                <tr key={index}>\n                  {headers.map((header, ind) => (\n                    <td key={ind} className=\"td\">\n                      {row[header]}\n                    </td>\n                  ))}\n                </tr>\n              ))\n            }\n          </tbody>\n        </table>\n      }\n    </div>\n  )\n}\n\nexport default Table;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,WAAW,QAAQ,wBAAwB;AAAC;AAErD,eAAeC,YAAY,CAACC,aAAkB,EAAEC,aAAkB,EAAEC,SAAc,EAAE;EAClF,MAAMC,MAAM,GAAG,MAAMC,KAAK,CACxB,kCAAkC,EAClC;IACEC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAET,aAAa;MACpBE,SAAS,EAAEA,SAAS;MACpBD,aAAa,EAAEA;IACjB,CAAC;EACH,CAAC,CACF;EAED,OAAO,MAAME,MAAM,CAACO,IAAI,EAAE;AAC5B;AAEA,MAAMV,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASW,iBAAiB,GAAG;EAC3B,OAAOZ,YAAY,CACjBC,aAAa,EACb,cAAc,EACd,CAAC,CAAC,CACH;AACH;AAEA,MAAMY,sBAAsB,GAAG,YAA4B;EACzD,MAAM;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMH,iBAAiB,EAAE;EAElD,IAAIE,MAAM,EAAE;IACVE,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;EACvB;EACA;EACA,OAAOC,IAAI,CAACA,IAAI,CAACG,SAAS;AAC5B,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAM;EAAA;EAAA;EACzB,MAAM;IAAEJ,IAAI;IAAEE,KAAK;IAAEG;EAAU,CAAC,GAAGtB,UAAU,CAACC,WAAW,CAAC;EAC1DiB,OAAO,CAACK,GAAG,CAACN,IAAI,EAAEE,KAAK,EAAEG,SAAS,CAAC;EAEnC,MAAME,OAAc,GAAGP,IAAI,aAAJA,IAAI,6BAAJA,IAAI,CAAEA,IAAI,uCAAV,WAAYG,SAAS,GAAGK,MAAM,CAACC,IAAI,CAACT,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;EACxE,oBACE;IAAK,SAAS,EAAC,gBAAgB;IAAC,KAAK,EAAE;MAAEU,KAAK,EAAE;IAAQ,CAAE;IAAA,uBAEtD;MAAO,SAAS,EAAC,OAAO;MAAA,wBACtB;QAAA,uBACE;UAAI,SAAS,EAAC,IAAI;UAAA,UACfH,OAAO,CAACI,GAAG,CAACC,MAAM,iBAAK;YAAA,UAAKA;UAAM;YAAA;YAAA;YAAA;UAAA,QAAO;QAAC;UAAA;UAAA;UAAA;QAAA;MACxC;QAAA;QAAA;QAAA;MAAA,QACC,eACR;QAAA,UACIZ,IAAI,IACJA,IAAI,CAACW,GAAG,CAAC,CAACE,GAAG,EAAEC,KAAK,kBAClB;UAAA,UACGP,OAAO,CAACI,GAAG,CAAC,CAACC,MAAM,EAAEG,GAAG,kBACvB;YAAc,SAAS,EAAC,IAAI;YAAA,UACzBF,GAAG,CAACD,MAAM;UAAC,GADLG,GAAG;YAAA;YAAA;YAAA;UAAA,QAGb;QAAC,GALKD,KAAK;UAAA;UAAA;UAAA;QAAA,QAOf;MAAC;QAAA;QAAA;QAAA;MAAA,QAEE;IAAA;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QAEN;AAEV,CAAC;AAAA,GA/BYV,KAAK;AAAA,KAALA,KAAK;AAiClB,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}