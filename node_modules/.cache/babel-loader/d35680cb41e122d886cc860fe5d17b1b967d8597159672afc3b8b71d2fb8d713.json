{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/components/Display.tsx\",\n  _s = $RefreshSig$();\nimport React, { lazy, Suspense } from 'react';\nimport '../App.css';\nimport { useGetData } from '../hooks/useGetData';\nimport { CallbackButton } from './CallbackButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  const result = await fetch(\"http://localhost:8080/v1/graphql\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName\n    })\n  });\n  return await result.json();\n}\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\nfunction fetchGetCustomers() {\n  return fetchGraphQL(operationsDoc, \"GetCustomers\", {});\n}\nasync function startFetchGetCustomers() {\n  const {\n    errors,\n    data\n  } = await fetchGetCustomers();\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n}\nconst LazyTable = /*#__PURE__*/lazy(_c = () => import('./Table'));\n_c2 = LazyTable;\nexport const Display = _ref => {\n  _s();\n  let {\n    url\n  } = _ref;\n  const results = useGetData(url);\n  const onAdd = () => {\n    const url = 'http://localhost:3000/addcustomer';\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: \"this-is-a-customerId\",\n        email: \"test@test.com\",\n        first_name: \"Lebron\",\n        last_name: \"James\"\n      })\n    };\n    fetch(url, options);\n  };\n  const onRemove = () => {\n    const url = 'http://localhost:3000/removecustomer';\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: \"this-is-a-customerId\"\n      })\n    };\n    fetch(url, options);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CallbackButton, {\n      callback: onAdd,\n      text: \"Add test Customer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CallbackButton, {\n      callback: onRemove,\n      text: \"remove test Customer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"qLPmwiPyPby99desLfBBPj7TnZ8=\", false, function () {\n  return [useGetData];\n});\n_c3 = Display;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LazyTable$lazy\");\n$RefreshReg$(_c2, \"LazyTable\");\n$RefreshReg$(_c3, \"Display\");","map":{"version":3,"names":["React","lazy","Suspense","useGetData","CallbackButton","fetchGraphQL","operationsDoc","operationName","variables","result","fetch","method","body","JSON","stringify","query","json","fetchGetCustomers","startFetchGetCustomers","errors","data","console","error","customers","LazyTable","Display","url","results","onAdd","options","headers","customerId","email","first_name","last_name","onRemove"],"sources":["/Users/kerj/Projects/gql-hasura/src/components/Display.tsx"],"sourcesContent":["import React, { lazy, Suspense } from 'react'\nimport '../App.css';\nimport { useGetData } from '../hooks/useGetData';\nimport { CallbackButton } from './CallbackButton';\n\nasync function fetchGraphQL(operationsDoc: any, operationName: any, variables: any) {\n  const result = await fetch(\n    \"http://localhost:8080/v1/graphql\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: operationsDoc,\n        variables: variables,\n        operationName: operationName\n      })\n    }\n  );\n\n  return await result.json();\n}\n\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\n\nfunction fetchGetCustomers() {\n  return fetchGraphQL(\n    operationsDoc,\n    \"GetCustomers\",\n    {}\n  );\n}\n\nasync function startFetchGetCustomers() {\n  const { errors, data } = await fetchGetCustomers();\n\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n}\n\nconst LazyTable  = lazy(() => import('./Table'))\n\nexport const Display = ({ url }: { url: string }) => {\n\n  const results = useGetData(url);\n  const onAdd = () => {\n    const url = 'http://localhost:3000/addcustomer'\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: \"this-is-a-customerId\",\n        email: \"test@test.com\",\n        first_name: \"Lebron\",\n        last_name: \"James\",\n      })\n    }\n\n    fetch(url, options)\n  }\n\n  const onRemove = () => {\n    const url = 'http://localhost:3000/removecustomer'\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: \"this-is-a-customerId\",\n      })\n    }\n\n    fetch(url, options)\n  }\n\n  return (\n    <>\n      <CallbackButton callback={onAdd} text=\"Add test Customer\" />\n      <CallbackButton callback={onRemove} text=\"remove test Customer\" />\n      <Suspense>\n\n      </Suspense>\n    </>\n  )\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,IAAI,EAAEC,QAAQ,QAAQ,OAAO;AAC7C,OAAO,YAAY;AACnB,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,cAAc,QAAQ,kBAAkB;AAAC;AAAA;AAElD,eAAeC,YAAY,CAACC,aAAkB,EAAEC,aAAkB,EAAEC,SAAc,EAAE;EAClF,MAAMC,MAAM,GAAG,MAAMC,KAAK,CACxB,kCAAkC,EAClC;IACEC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAET,aAAa;MACpBE,SAAS,EAAEA,SAAS;MACpBD,aAAa,EAAEA;IACjB,CAAC;EACH,CAAC,CACF;EAED,OAAO,MAAME,MAAM,CAACO,IAAI,EAAE;AAC5B;AAEA,MAAMV,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASW,iBAAiB,GAAG;EAC3B,OAAOZ,YAAY,CACjBC,aAAa,EACb,cAAc,EACd,CAAC,CAAC,CACH;AACH;AAEA,eAAeY,sBAAsB,GAAG;EACtC,MAAM;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMH,iBAAiB,EAAE;EAElD,IAAIE,MAAM,EAAE;IACVE,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;EACvB;EACA;EACA,OAAOC,IAAI,CAACA,IAAI,CAACG,SAAS;AAC5B;AAEA,MAAMC,SAAS,gBAAIvB,IAAI,MAAC,MAAM,MAAM,CAAC,SAAS,CAAC,CAAC;AAAA,MAA1CuB,SAAS;AAEf,OAAO,MAAMC,OAAO,GAAG,QAA8B;EAAA;EAAA,IAA7B;IAAEC;EAAqB,CAAC;EAE9C,MAAMC,OAAO,GAAGxB,UAAU,CAACuB,GAAG,CAAC;EAC/B,MAAME,KAAK,GAAG,MAAM;IAClB,MAAMF,GAAG,GAAG,mCAAmC;IAC/C,MAAMG,OAAO,GAAG;MACdlB,MAAM,EAAE,MAAM;MACdmB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDlB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBiB,UAAU,EAAE,sBAAsB;QAClCC,KAAK,EAAE,eAAe;QACtBC,UAAU,EAAE,QAAQ;QACpBC,SAAS,EAAE;MACb,CAAC;IACH,CAAC;IAEDxB,KAAK,CAACgB,GAAG,EAAEG,OAAO,CAAC;EACrB,CAAC;EAED,MAAMM,QAAQ,GAAG,MAAM;IACrB,MAAMT,GAAG,GAAG,sCAAsC;IAClD,MAAMG,OAAO,GAAG;MACdlB,MAAM,EAAE,MAAM;MACdmB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDlB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBiB,UAAU,EAAE;MACd,CAAC;IACH,CAAC;IAEDrB,KAAK,CAACgB,GAAG,EAAEG,OAAO,CAAC;EACrB,CAAC;EAED,oBACE;IAAA,wBACE,QAAC,cAAc;MAAC,QAAQ,EAAED,KAAM;MAAC,IAAI,EAAC;IAAmB;MAAA;MAAA;MAAA;IAAA,QAAG,eAC5D,QAAC,cAAc;MAAC,QAAQ,EAAEO,QAAS;MAAC,IAAI,EAAC;IAAsB;MAAA;MAAA;MAAA;IAAA,QAAG,eAClE,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA,QAEE;EAAA,gBACV;AAEP,CAAC;AAAA,GA7CYV,OAAO;EAAA,QAEFtB,UAAU;AAAA;AAAA,MAFfsB,OAAO;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}