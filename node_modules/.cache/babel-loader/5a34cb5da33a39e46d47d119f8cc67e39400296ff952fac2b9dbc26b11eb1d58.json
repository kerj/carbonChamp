{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/components/Display.tsx\",\n  _s = $RefreshSig$();\nimport { gql, useApolloClient } from '@apollo/client';\nimport '../App.css';\nimport { useCreateCustomerMutation, useDeleteCustomerByPkMutation, useGetCustomersLikeNameQuery, useSubGetCustomersLikeNameSubscription } from '../generated/graphql';\nimport { CallbackButton } from './CallbackButton';\nimport { Search } from './Search';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Display = () => {\n  _s();\n  const client = useApolloClient();\n\n  // const customers = client.readQuery({\n  //   query: GetCustomersLikeNameDocument,\n  //   variables: { limit: 19, first_name_term: \"Le%\" }\n  // })\n  // const customers_stream = client.readFragment({\n  //   variables: { limit: 19, fn_like: \"Le%\" },\n  //   fragment: gql`\n  //     fragment Test on \n  //   `\n  // })\n  console.log(client.cache.extract());\n  const key = client.cache.identify({\n    __typename: \"ROOT_SUBSCRIPTION\"\n  });\n  const fragment = gql`\n    fragment test on ROOT_SUBSCRIPTION {\n      first_name\n    }\n  `;\n  const testData = clie;\n  const {\n    data\n  } = useGetCustomersLikeNameQuery({\n    variables: {\n      limit: 19,\n      first_name_term: \"Le%\"\n    }\n  });\n  console.log(data);\n  const {\n    data: data2\n  } = useSubGetCustomersLikeNameSubscription({\n    variables: {\n      limit: 19,\n      fn_like: \"Le%\"\n    }\n  });\n  const [deleteCustomerByPkMutation] = useDeleteCustomerByPkMutation({\n    fetchPolicy: 'network-only'\n  });\n  const [createCustomerMutation] = useCreateCustomerMutation({\n    fetchPolicy: \"network-only\"\n  });\n  const onAdd = () => {\n    createCustomerMutation({\n      variables: {\n        customer_id: \"this-is-a-customerId\",\n        email_address: \"test@test.com\",\n        last_name: \"James\",\n        first_name: \"LeBron\"\n      }\n    });\n  };\n  const onRemove = () => {\n    deleteCustomerByPkMutation({\n      variables: {\n        customer_id: \"this-is-a-customerId\"\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [false && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CallbackButton, {\n        callback: onAdd,\n        text: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CallbackButton, {\n        callback: onRemove,\n        text: \"remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), true && /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Display, \"4QvaLAYpIojY4P4MlSu8g+mwk0M=\", false, function () {\n  return [useApolloClient, useGetCustomersLikeNameQuery, useSubGetCustomersLikeNameSubscription, useDeleteCustomerByPkMutation, useCreateCustomerMutation];\n});\n_c = Display;\nexport default Display;\nvar _c;\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"names":["gql","useApolloClient","useCreateCustomerMutation","useDeleteCustomerByPkMutation","useGetCustomersLikeNameQuery","useSubGetCustomersLikeNameSubscription","CallbackButton","Search","Display","client","console","log","cache","extract","key","identify","__typename","fragment","testData","clie","data","variables","limit","first_name_term","data2","fn_like","deleteCustomerByPkMutation","fetchPolicy","createCustomerMutation","onAdd","customer_id","email_address","last_name","first_name","onRemove"],"sources":["/Users/kerj/Projects/gql-hasura/src/components/Display.tsx"],"sourcesContent":["import { gql, useApolloClient } from '@apollo/client';\nimport '../App.css';\nimport { GetCustomersLikeNameDocument, SubGetCustomersLikeNameDocument, useCreateCustomerMutation, useDeleteCustomerByPkMutation, useGetCustomersLikeNameQuery, useSubGetCustomersLikeNameSubscription } from '../generated/graphql';\nimport { CallbackButton } from './CallbackButton';\nimport { Search } from './Search';\nimport { Table } from './Table';\n\nexport type ContextType = {\n  data: {\n    data: {\n      customers: { email_address: string, first_name: string, last_name: string }[]\n    }\n  }\n}\n\nexport const Display = () => {\n  const client = useApolloClient()\n\n  \n\n  // const customers = client.readQuery({\n  //   query: GetCustomersLikeNameDocument,\n  //   variables: { limit: 19, first_name_term: \"Le%\" }\n  // })\n  // const customers_stream = client.readFragment({\n  //   variables: { limit: 19, fn_like: \"Le%\" },\n  //   fragment: gql`\n  //     fragment Test on \n  //   `\n  // })\n  console.log(client.cache.extract())\n\n  const key = client.cache.identify({\n    __typename: \"ROOT_SUBSCRIPTION\",\n  })\n  const fragment = gql`\n    fragment test on ROOT_SUBSCRIPTION {\n      first_name\n    }\n  `\n\n  const testData = clie\n\n  const { data } = useGetCustomersLikeNameQuery({\n    variables: { limit: 19, first_name_term: \"Le%\" },\n  })\n  console.log(data)\n  const { data: data2 } = useSubGetCustomersLikeNameSubscription({\n    variables: { limit: 19, fn_like: \"Le%\" },\n  })\n  const [deleteCustomerByPkMutation] = useDeleteCustomerByPkMutation({\n    fetchPolicy: 'network-only',\n  })\n  const [createCustomerMutation] = useCreateCustomerMutation({\n    fetchPolicy: \"network-only\",\n  })\n  const onAdd = () => {\n    createCustomerMutation({\n      variables: {\n        customer_id: \"this-is-a-customerId\",\n        email_address: \"test@test.com\",\n        last_name: \"James\",\n        first_name: \"LeBron\"\n      }\n    })\n  }\n  const onRemove = () => {\n    deleteCustomerByPkMutation({ variables: { customer_id: \"this-is-a-customerId\" } })\n  }\n\n\n  return (\n    <>\n      {\n        false &&\n        <>\n          <CallbackButton callback={onAdd} text=\"Add\"></CallbackButton>\n          <CallbackButton callback={onRemove} text=\"remove\"></CallbackButton>\n          {/* {data &&\n            // <Table data={data} />\n          } */}\n        </>\n      }\n      {true &&\n        <Search />\n      }\n    </>\n  )\n}\n\nexport default Display;"],"mappings":";;AAAA,SAASA,GAAG,EAAEC,eAAe,QAAQ,gBAAgB;AACrD,OAAO,YAAY;AACnB,SAAwEC,yBAAyB,EAAEC,6BAA6B,EAAEC,4BAA4B,EAAEC,sCAAsC,QAAQ,sBAAsB;AACpO,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,MAAM,QAAQ,UAAU;AAAC;AAAA;AAWlC,OAAO,MAAMC,OAAO,GAAG,MAAM;EAAA;EAC3B,MAAMC,MAAM,GAAGR,eAAe,EAAE;;EAIhC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAS,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,KAAK,CAACC,OAAO,EAAE,CAAC;EAEnC,MAAMC,GAAG,GAAGL,MAAM,CAACG,KAAK,CAACG,QAAQ,CAAC;IAChCC,UAAU,EAAE;EACd,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAGjB,GAAI;AACvB;AACA;AACA;AACA,GAAG;EAED,MAAMkB,QAAQ,GAAGC,IAAI;EAErB,MAAM;IAAEC;EAAK,CAAC,GAAGhB,4BAA4B,CAAC;IAC5CiB,SAAS,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,eAAe,EAAE;IAAM;EACjD,CAAC,CAAC;EACFb,OAAO,CAACC,GAAG,CAACS,IAAI,CAAC;EACjB,MAAM;IAAEA,IAAI,EAAEI;EAAM,CAAC,GAAGnB,sCAAsC,CAAC;IAC7DgB,SAAS,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEG,OAAO,EAAE;IAAM;EACzC,CAAC,CAAC;EACF,MAAM,CAACC,0BAA0B,CAAC,GAAGvB,6BAA6B,CAAC;IACjEwB,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAM,CAACC,sBAAsB,CAAC,GAAG1B,yBAAyB,CAAC;IACzDyB,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAME,KAAK,GAAG,MAAM;IAClBD,sBAAsB,CAAC;MACrBP,SAAS,EAAE;QACTS,WAAW,EAAE,sBAAsB;QACnCC,aAAa,EAAE,eAAe;QAC9BC,SAAS,EAAE,OAAO;QAClBC,UAAU,EAAE;MACd;IACF,CAAC,CAAC;EACJ,CAAC;EACD,MAAMC,QAAQ,GAAG,MAAM;IACrBR,0BAA0B,CAAC;MAAEL,SAAS,EAAE;QAAES,WAAW,EAAE;MAAuB;IAAE,CAAC,CAAC;EACpF,CAAC;EAGD,oBACE;IAAA,WAEI,KAAK,iBACL;MAAA,wBACE,QAAC,cAAc;QAAC,QAAQ,EAAED,KAAM;QAAC,IAAI,EAAC;MAAK;QAAA;QAAA;QAAA;MAAA,QAAkB,eAC7D,QAAC,cAAc;QAAC,QAAQ,EAAEK,QAAS;QAAC,IAAI,EAAC;MAAQ;QAAA;QAAA;QAAA;MAAA,QAAkB;IAAA,gBAIlE,EAEJ,IAAI,iBACH,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA,gBAEX;AAEP,CAAC;AAAA,GAzEY1B,OAAO;EAAA,QACHP,eAAe,EA2BbG,4BAA4B,EAIrBC,sCAAsC,EAGzBF,6BAA6B,EAGjCD,yBAAyB;AAAA;AAAA,KAtC/CM,OAAO;AA2EpB,eAAeA,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}