{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink } from \"@apollo/client\";\nimport { lazy, Suspense } from \"react\";\nimport { useGetCustomersLikeNameQuery } from \"./generated/graphql\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Display = /*#__PURE__*/lazy(_c = () => import(\"./components/Display\"));\n_c2 = Display;\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"http://localhost:8080/v1/graphql\"\n  })\n});\nfunction App() {\n  _s();\n  const {\n    data\n  } = useGetCustomersLikeNameQuery({\n    fetchPolicy: 'network-only',\n    variables: {\n      limit: 19,\n      first_name_term: \"Le%\"\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"Loading...\"\n        }, void 0, false),\n        children: /*#__PURE__*/_jsxDEV(Display, {\n          data: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vbyUbzGrFSc1iX2G/R9NU0uK7Ms=\", false, function () {\n  return [useGetCustomersLikeNameQuery];\n});\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Display$lazy\");\n$RefreshReg$(_c2, \"Display\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["ApolloProvider","ApolloClient","InMemoryCache","HttpLink","lazy","Suspense","useGetCustomersLikeNameQuery","Display","client","cache","link","uri","App","data","fetchPolicy","variables","limit","first_name_term"],"sources":["/Users/kerj/Projects/gql-hasura/src/App.tsx"],"sourcesContent":["\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink } from \"@apollo/client\";\nimport { lazy, Suspense } from \"react\";\nimport { useGetCustomersLikeNameQuery } from \"./generated/graphql\";\nconst Display = lazy(() => import(\"./components/Display\"))\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"http://localhost:8080/v1/graphql\"\n  })\n})\n\nfunction App() {\n  const { data } = useGetCustomersLikeNameQuery({\n    fetchPolicy: 'network-only',\n    variables: { limit: 19, first_name_term: \"Le%\" },\n  });\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Suspense fallback={<>Loading...</>} >\n          <Display data={data} />\n        </Suspense>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,SAASA,cAAc,EAAEC,YAAY,EAAEC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACtF,SAASC,IAAI,EAAEC,QAAQ,QAAQ,OAAO;AACtC,SAASC,4BAA4B,QAAQ,qBAAqB;AAAC;AAAA;AACnE,MAAMC,OAAO,gBAAGH,IAAI,MAAC,MAAM,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAAA,MAApDG,OAAO;AACb,MAAMC,MAAM,GAAG,IAAIP,YAAY,CAAC;EAC9BQ,KAAK,EAAE,IAAIP,aAAa,EAAE;EAC1BQ,IAAI,EAAE,IAAIP,QAAQ,CAAC;IACjBQ,GAAG,EAAE;EACP,CAAC;AACH,CAAC,CAAC;AAEF,SAASC,GAAG,GAAG;EAAA;EACb,MAAM;IAAEC;EAAK,CAAC,GAAGP,4BAA4B,CAAC;IAC5CQ,WAAW,EAAE,cAAc;IAC3BC,SAAS,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,eAAe,EAAE;IAAM;EACjD,CAAC,CAAC;EACF,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB,QAAC,cAAc;MAAC,MAAM,EAAET,MAAO;MAAA,uBAC7B,QAAC,QAAQ;QAAC,QAAQ,eAAE;UAAA,UAAE;QAAU,iBAAI;QAAA,uBAClC,QAAC,OAAO;UAAC,IAAI,EAAEK;QAAK;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA;IACd;MAAA;MAAA;MAAA;IAAA;EACI;IAAA;IAAA;IAAA;EAAA,QACb;AAEV;AAAC,GAdQD,GAAG;EAAA,QACON,4BAA4B;AAAA;AAAA,MADtCM,GAAG;AAgBZ,eAAeA,GAAG;AAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}