{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/App.tsx\";\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, split } from \"@apollo/client\";\nimport { createClient } from \"graphql-ws\";\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { lazy, Suspense } from \"react\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Display = /*#__PURE__*/lazy(_c = () => import(\"./components/Display\"));\n_c2 = Display;\nconst http = new HttpLink({\n  uri: \"http://localhost:8080/v1/graphql\"\n});\nconst ws = new GraphQLWsLink(createClient({\n  url: \"ws://localhost:8080/v1/graphql\"\n  // connectionParams: {\n  //   authToken: auth\n  // }\n}));\n// allows subscriptions to use ws and others to use http\nconst splitLink = split(_ref => {\n  let {\n    query\n  } = _ref;\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, ws, http);\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink\n});\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"Loading...\"\n        }, void 0, false),\n        children: /*#__PURE__*/_jsxDEV(Display, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Display$lazy\");\n$RefreshReg$(_c2, \"Display\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["ApolloProvider","ApolloClient","InMemoryCache","HttpLink","split","createClient","GraphQLWsLink","lazy","Suspense","getMainDefinition","Display","http","uri","ws","url","splitLink","query","definition","kind","operation","client","cache","link","App"],"sources":["/Users/kerj/Projects/gql-hasura/src/App.tsx"],"sourcesContent":["\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, split } from \"@apollo/client\";\nimport { createClient } from \"graphql-ws\";\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { lazy, Suspense } from \"react\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nconst Display = lazy(() => import(\"./components/Display\"))\n\nconst http = new HttpLink({\n  uri: \"http://localhost:8080/v1/graphql\"\n})\nconst ws = new GraphQLWsLink(createClient({\n  url: \"ws://localhost:8080/v1/graphql\"\n  // connectionParams: {\n  //   authToken: auth\n  // }\n}));\n// allows subscriptions to use ws and others to use http\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  ws,\n  http\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: splitLink,\n})\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Suspense fallback={<>Loading...</>} >\n          <Display />\n        </Suspense>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AACA,SAASA,cAAc,EAAEC,YAAY,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC7F,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,IAAI,EAAEC,QAAQ,QAAQ,OAAO;AACtC,SAASC,iBAAiB,QAAQ,0BAA0B;AAAC;AAAA;AAC7D,MAAMC,OAAO,gBAAGH,IAAI,MAAC,MAAM,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAAA,MAApDG,OAAO;AAEb,MAAMC,IAAI,GAAG,IAAIR,QAAQ,CAAC;EACxBS,GAAG,EAAE;AACP,CAAC,CAAC;AACF,MAAMC,EAAE,GAAG,IAAIP,aAAa,CAACD,YAAY,CAAC;EACxCS,GAAG,EAAE;EACL;EACA;EACA;AACF,CAAC,CAAC,CAAC;AACH;AACA,MAAMC,SAAS,GAAGX,KAAK,CACrB,QAAe;EAAA,IAAd;IAAEY;EAAM,CAAC;EACR,MAAMC,UAAU,GAAGR,iBAAiB,CAACO,KAAK,CAAC;EAC3C,OACEC,UAAU,CAACC,IAAI,KAAK,qBAAqB,IACzCD,UAAU,CAACE,SAAS,KAAK,cAAc;AAE3C,CAAC,EACDN,EAAE,EACFF,IAAI,CACL;AAED,MAAMS,MAAM,GAAG,IAAInB,YAAY,CAAC;EAC9BoB,KAAK,EAAE,IAAInB,aAAa,EAAE;EAC1BoB,IAAI,EAAEP;AACR,CAAC,CAAC;AAEF,SAASQ,GAAG,GAAG;EACb,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB,QAAC,cAAc;MAAC,MAAM,EAAEH,MAAO;MAAA,uBAC7B,QAAC,QAAQ;QAAC,QAAQ,eAAE;UAAA,UAAE;QAAU,iBAAI;QAAA,uBAClC,QAAC,OAAO;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA;IACF;MAAA;MAAA;MAAA;IAAA;EACI;IAAA;IAAA;IAAA;EAAA,QACb;AAEV;AAAC,MAVQG,GAAG;AAYZ,eAAeA,GAAG;AAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}