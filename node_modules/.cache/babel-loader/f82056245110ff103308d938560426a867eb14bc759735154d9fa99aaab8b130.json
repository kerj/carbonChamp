{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/Context/DataContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer, useCallback, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dataReducer = (state, action) => {\n  switch (action.type) {\n    case 'fetchStarted':\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n    case 'fetchSuccess':\n      return {\n        ...state,\n        isLoading: false,\n        error: null,\n        data: action.data\n      };\n    case 'fetchError':\n      return {\n        ...state,\n        isLoading: false,\n        error: action.error\n      };\n    default:\n      throw new Error(`Unhandled action type: ${action}`);\n  }\n};\nexport const DataContext = /*#__PURE__*/createContext({\n  data: null,\n  isLoading: false,\n  error: null,\n  fetch: async () => {}\n});\nexport const DataProvider = _ref => {\n  _s();\n  let {\n    requestMetas,\n    children,\n    initialData\n  } = _ref;\n  const [state, dispatch] = useReducer(dataReducer, {\n    data: null,\n    isLoading: false,\n    error: null\n  });\n  const fetchData = useCallback(async signal => {\n    dispatch({\n      type: \"fetchStarted\"\n    });\n    try {\n      const response = await fetch(requestMetas.url, {\n        ...requestMetas.options\n      });\n      const result = await response.json();\n      dispatch({\n        type: \"fetchSuccess\",\n        data: result\n      });\n    } catch (e) {\n      dispatch({\n        type: \"fetchError\",\n        error: e\n      });\n    }\n  }, [requestMetas]);\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    fetchData(signal);\n    return () => {\n      controller.abort();\n    };\n  }, [fetchData]);\n  const value = {\n    data: state.data,\n    isLoading: state.isLoading,\n    error: state.error,\n    fetch: () => fetchData(new AbortController().signal)\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(DataProvider, \"XNueGvUKkoLh1Ekbpf6hVvHhkGY=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["createContext","useReducer","useCallback","useEffect","dataReducer","state","action","type","isLoading","error","data","Error","DataContext","fetch","DataProvider","requestMetas","children","initialData","dispatch","fetchData","signal","response","url","options","result","json","e","controller","AbortController","abort","value"],"sources":["/Users/kerj/Projects/gql-hasura/src/Context/DataContext.tsx"],"sourcesContent":["import { createContext, useReducer, useCallback, useEffect } from \"react\";\n\ntype DataProviderProps<T> = {\n  requestMetas: { url: string, options: any };\n  children: JSX.Element;\n  initialData?: T\n}\n\nexport type DataState<T> = {\n  data: T | null\n  isLoading: boolean,\n  error: Error | null,\n}\n\nexport type DataActions<T> =\n  | { type: 'fetchStarted' }\n  | { type: 'fetchSuccess'; data: T; }\n  | { type: 'fetchError'; error: Error; };\n\ntype DataContextValue<T> = {\n  data: DataState<T>['data'],\n  isLoading: DataState<T>['isLoading'],\n  error: DataState<T>['error'],\n  fetch: () => Promise<void>,\n\n}\n\nconst dataReducer = <T,>(state: DataState<T>, action: DataActions<T>): DataState<T> => {\n  switch (action.type) {\n    case 'fetchStarted':\n      return { ...state, isLoading: true, error: null }\n    case 'fetchSuccess':\n      return { ...state, isLoading: false, error: null, data: action.data };\n    case 'fetchError':\n      return { ...state, isLoading: false, error: action.error }\n    default:\n      throw new Error(`Unhandled action type: ${action}`)\n  }\n}\n\nexport const DataContext = createContext<DataContextValue<any>>({\n  data: null,\n  isLoading: false,\n  error: null,\n  fetch: async () => { }\n})\n\nexport const DataProvider = <T,>({ requestMetas, children, initialData }: DataProviderProps<T>) => {\n  const [state, dispatch] = useReducer(dataReducer, {\n    data: null,\n    isLoading: false,\n    error: null\n  });\n\n  const fetchData = useCallback(async (signal: AbortSignal) => {\n    dispatch({ type: \"fetchStarted\" });\n    try {\n      const response = await fetch(requestMetas.url, { ...requestMetas.options });\n      const result = await response.json();\n      dispatch({ type: \"fetchSuccess\", data: result })\n    } catch (e) {\n      dispatch({ type: \"fetchError\", error: e as Error })\n    }\n  }, [requestMetas])\n\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal\n    fetchData(signal);\n\n    return () => {\n      controller.abort();\n    }\n\n  }, [fetchData])\n\n  const value: DataContextValue<any> = {\n    data: state.data,\n    isLoading: state.isLoading,\n    error: state.error,\n    fetch: () => fetchData(new AbortController().signal),\n  }\n  return (\n    <DataContext.Provider value={value}>{children}</DataContext.Provider>\n  )\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AAAC;AA2B1E,MAAMC,WAAW,GAAG,CAAKC,KAAmB,EAAEC,MAAsB,KAAmB;EACrF,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,cAAc;MACjB,OAAO;QAAE,GAAGF,KAAK;QAAEG,SAAS,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAK,CAAC;IACnD,KAAK,cAAc;MACjB,OAAO;QAAE,GAAGJ,KAAK;QAAEG,SAAS,EAAE,KAAK;QAAEC,KAAK,EAAE,IAAI;QAAEC,IAAI,EAAEJ,MAAM,CAACI;MAAK,CAAC;IACvE,KAAK,YAAY;MACf,OAAO;QAAE,GAAGL,KAAK;QAAEG,SAAS,EAAE,KAAK;QAAEC,KAAK,EAAEH,MAAM,CAACG;MAAM,CAAC;IAC5D;MACE,MAAM,IAAIE,KAAK,CAAE,0BAAyBL,MAAO,EAAC,CAAC;EAAA;AAEzD,CAAC;AAED,OAAO,MAAMM,WAAW,gBAAGZ,aAAa,CAAwB;EAC9DU,IAAI,EAAE,IAAI;EACVF,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EACXI,KAAK,EAAE,YAAY,CAAE;AACvB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAG,QAAuE;EAAA;EAAA,IAAlE;IAAEC,YAAY;IAAEC,QAAQ;IAAEC;EAAkC,CAAC;EAC5F,MAAM,CAACZ,KAAK,EAAEa,QAAQ,CAAC,GAAGjB,UAAU,CAACG,WAAW,EAAE;IAChDM,IAAI,EAAE,IAAI;IACVF,SAAS,EAAE,KAAK;IAChBC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMU,SAAS,GAAGjB,WAAW,CAAC,MAAOkB,MAAmB,IAAK;IAC3DF,QAAQ,CAAC;MAAEX,IAAI,EAAE;IAAe,CAAC,CAAC;IAClC,IAAI;MACF,MAAMc,QAAQ,GAAG,MAAMR,KAAK,CAACE,YAAY,CAACO,GAAG,EAAE;QAAE,GAAGP,YAAY,CAACQ;MAAQ,CAAC,CAAC;MAC3E,MAAMC,MAAM,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;MACpCP,QAAQ,CAAC;QAAEX,IAAI,EAAE,cAAc;QAAEG,IAAI,EAAEc;MAAO,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOE,CAAC,EAAE;MACVR,QAAQ,CAAC;QAAEX,IAAI,EAAE,YAAY;QAAEE,KAAK,EAAEiB;MAAW,CAAC,CAAC;IACrD;EACF,CAAC,EAAE,CAACX,YAAY,CAAC,CAAC;EAElBZ,SAAS,CAAC,MAAM;IACd,MAAMwB,UAAU,GAAG,IAAIC,eAAe,EAAE;IACxC,MAAMR,MAAM,GAAGO,UAAU,CAACP,MAAM;IAChCD,SAAS,CAACC,MAAM,CAAC;IAEjB,OAAO,MAAM;MACXO,UAAU,CAACE,KAAK,EAAE;IACpB,CAAC;EAEH,CAAC,EAAE,CAACV,SAAS,CAAC,CAAC;EAEf,MAAMW,KAA4B,GAAG;IACnCpB,IAAI,EAAEL,KAAK,CAACK,IAAI;IAChBF,SAAS,EAAEH,KAAK,CAACG,SAAS;IAC1BC,KAAK,EAAEJ,KAAK,CAACI,KAAK;IAClBI,KAAK,EAAE,MAAMM,SAAS,CAAC,IAAIS,eAAe,EAAE,CAACR,MAAM;EACrD,CAAC;EACD,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEU,KAAM;IAAA,UAAEd;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAwB;AAEzE,CAAC;AAAA,GAtCYF,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}