{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/components/Display.tsx\";\nimport React, { lazy } from 'react';\nimport '../App.css';\nimport { DataProvider } from '../Context/DataContext';\nimport Table from './Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  const result = await fetch(\"http://localhost:8080/v1/graphql\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`,\n      variables: variables,\n      operationName: operationName\n    })\n  });\n  return await result.json();\n}\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\nfunction fetchGetCustomers() {\n  return fetchGraphQL(operationsDoc, \"GetCustomers\", {});\n}\nasync function startFetchGetCustomers() {\n  const {\n    errors,\n    data\n  } = await fetchGetCustomers();\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n}\nconst LazyTable = /*#__PURE__*/lazy(_c = () => import('./Table'));\n_c2 = LazyTable;\nexport const Display = _ref => {\n  let {\n    url\n  } = _ref;\n  const onAdd = () => {\n    const url = 'http://localhost:3000/addcustomer';\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: \"this-is-a-customerId\",\n        email: \"test@test.com\",\n        first_name: \"Lebron\",\n        last_name: \"James\"\n      })\n    };\n    fetch(url, options);\n  };\n  const onRemove = () => {\n    const url = 'http://localhost:3000/removecustomer';\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: \"this-is-a-customerId\"\n      })\n    };\n    fetch(url, options);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(DataProvider, {\n      requestMetas: {\n        url: \"http://localhost:8080/v1/graphql\",\n        options: {}\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c3 = Display;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"LazyTable$lazy\");\n$RefreshReg$(_c2, \"LazyTable\");\n$RefreshReg$(_c3, \"Display\");","map":{"version":3,"names":["React","lazy","DataProvider","Table","fetchGraphQL","operationsDoc","operationName","variables","result","fetch","method","body","JSON","stringify","query","json","fetchGetCustomers","startFetchGetCustomers","errors","data","console","error","customers","LazyTable","Display","url","onAdd","options","headers","customerId","email","first_name","last_name","onRemove"],"sources":["/Users/kerj/Projects/gql-hasura/src/components/Display.tsx"],"sourcesContent":["import React, { lazy, Suspense } from 'react'\nimport '../App.css';\nimport { DataContext, DataProvider } from '../Context/DataContext';\nimport { useGetData } from '../hooks/useGetData';\nimport { CallbackButton } from './CallbackButton';\nimport Table from './Table';\ntype bs = {\n}\nasync function fetchGraphQL(operationsDoc: any, operationName: any, variables: any) {\n  const result = await fetch(\n    \"http://localhost:8080/v1/graphql\",\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        query: `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`,\n        variables: variables,\n        operationName: operationName\n      })\n    }\n  );\n\n  return await result.json();\n}\n\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\n\nfunction fetchGetCustomers() {\n  return fetchGraphQL(\n    operationsDoc,\n    \"GetCustomers\",\n    {}\n  );\n}\n\nasync function startFetchGetCustomers() {\n  const { errors, data } = await fetchGetCustomers();\n\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n}\n\nconst LazyTable = lazy(() => import('./Table'))\n\nexport const Display = ({ url }: { url: string }) => {\n  const onAdd = () => {\n    const url = 'http://localhost:3000/addcustomer'\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: \"this-is-a-customerId\",\n        email: \"test@test.com\",\n        first_name: \"Lebron\",\n        last_name: \"James\",\n      })\n    }\n\n    fetch(url, options)\n  }\n\n  const onRemove = () => {\n    const url = 'http://localhost:3000/removecustomer'\n    const options = {\n      method: \"POST\",\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        customerId: \"this-is-a-customerId\",\n      })\n    }\n\n    fetch(url, options)\n  }\n\n  return (\n    <>\n      <DataProvider requestMetas={{ url: \"http://localhost:8080/v1/graphql\", options: {} }} >\n        <Table />\n      </DataProvider>\n      {/* <CallbackButton callback={onAdd} text=\"Add test Customer\" />\n      <CallbackButton callback={onRemove} text=\"remove test Customer\" />\n      <Suspense fallback={<>Loading...</>} >\n        <LazyTable />\n      </Suspense> */}\n    </>\n  )\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,IAAI,QAAkB,OAAO;AAC7C,OAAO,YAAY;AACnB,SAAsBC,YAAY,QAAQ,wBAAwB;AAGlE,OAAOC,KAAK,MAAM,SAAS;AAAC;AAAA;AAG5B,eAAeC,YAAY,CAACC,aAAkB,EAAEC,aAAkB,EAAEC,SAAc,EAAE;EAClF,MAAMC,MAAM,GAAG,MAAMC,KAAK,CACxB,kCAAkC,EAClC;IACEC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAG;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;MACOP,SAAS,EAAEA,SAAS;MACpBD,aAAa,EAAEA;IACjB,CAAC;EACH,CAAC,CACF;EAED,OAAO,MAAME,MAAM,CAACO,IAAI,EAAE;AAC5B;AAEA,MAAMV,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASW,iBAAiB,GAAG;EAC3B,OAAOZ,YAAY,CACjBC,aAAa,EACb,cAAc,EACd,CAAC,CAAC,CACH;AACH;AAEA,eAAeY,sBAAsB,GAAG;EACtC,MAAM;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMH,iBAAiB,EAAE;EAElD,IAAIE,MAAM,EAAE;IACVE,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;EACvB;EACA;EACA,OAAOC,IAAI,CAACA,IAAI,CAACG,SAAS;AAC5B;AAEA,MAAMC,SAAS,gBAAGtB,IAAI,MAAC,MAAM,MAAM,CAAC,SAAS,CAAC,CAAC;AAAA,MAAzCsB,SAAS;AAEf,OAAO,MAAMC,OAAO,GAAG,QAA8B;EAAA,IAA7B;IAAEC;EAAqB,CAAC;EAC9C,MAAMC,KAAK,GAAG,MAAM;IAClB,MAAMD,GAAG,GAAG,mCAAmC;IAC/C,MAAME,OAAO,GAAG;MACdjB,MAAM,EAAE,MAAM;MACdkB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDjB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBgB,UAAU,EAAE,sBAAsB;QAClCC,KAAK,EAAE,eAAe;QACtBC,UAAU,EAAE,QAAQ;QACpBC,SAAS,EAAE;MACb,CAAC;IACH,CAAC;IAEDvB,KAAK,CAACgB,GAAG,EAAEE,OAAO,CAAC;EACrB,CAAC;EAED,MAAMM,QAAQ,GAAG,MAAM;IACrB,MAAMR,GAAG,GAAG,sCAAsC;IAClD,MAAME,OAAO,GAAG;MACdjB,MAAM,EAAE,MAAM;MACdkB,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDjB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBgB,UAAU,EAAE;MACd,CAAC;IACH,CAAC;IAEDpB,KAAK,CAACgB,GAAG,EAAEE,OAAO,CAAC;EACrB,CAAC;EAED,oBACE;IAAA,uBACE,QAAC,YAAY;MAAC,YAAY,EAAE;QAAEF,GAAG,EAAE,kCAAkC;QAAEE,OAAO,EAAE,CAAC;MAAE,CAAE;MAAA,uBACnF,QAAC,KAAK;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA;EACI,iBAMd;AAEP,CAAC;AAAA,MA9CYH,OAAO;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}