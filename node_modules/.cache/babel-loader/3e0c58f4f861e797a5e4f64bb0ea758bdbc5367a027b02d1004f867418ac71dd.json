{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/App.tsx\";\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, split } from \"@apollo/client\";\nimport { createClient } from \"graphql-ws\";\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions';\nimport { lazy, Suspense } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Display = /*#__PURE__*/lazy(_c = () => import(\"./components/Display\"));\n_c2 = Display;\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"http://localhost:8080/v1/graphql\"\n  })\n});\nconst http = new HttpLink({\n  uri: \"http://localhost:8080/v1/graphql\"\n});\nconst ws = new GraphQLWsLink(createClient({\n  url: \"ws://localhost:8080/v1/subscriptions\"\n}));\nconst splitLink = split({\n  query\n});\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ApolloProvider, {\n      client: client,\n      children: /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: \"Loading...\"\n        }, void 0, false),\n        children: /*#__PURE__*/_jsxDEV(Display, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Display$lazy\");\n$RefreshReg$(_c2, \"Display\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["ApolloProvider","ApolloClient","InMemoryCache","HttpLink","split","createClient","GraphQLWsLink","lazy","Suspense","Display","client","cache","link","uri","http","ws","url","splitLink","query","App"],"sources":["/Users/kerj/Projects/gql-hasura/src/App.tsx"],"sourcesContent":["\nimport { ApolloProvider, ApolloClient, InMemoryCache, HttpLink, split } from \"@apollo/client\";\nimport { createClient } from \"graphql-ws\";\nimport { GraphQLWsLink } from '@apollo/client/link/subscriptions'\nimport { lazy, Suspense } from \"react\";\nconst Display = lazy(() => import(\"./components/Display\"))\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: new HttpLink({\n    uri: \"http://localhost:8080/v1/graphql\"\n  })\n})\nconst http = new HttpLink({\n  uri: \"http://localhost:8080/v1/graphql\"\n})\nconst ws = new GraphQLWsLink(createClient({\n  url: \"ws://localhost:8080/v1/subscriptions\"\n}));\n\nconst splitLink = split(\n  ({query}) \n)\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ApolloProvider client={client}>\n        <Suspense fallback={<>Loading...</>} >\n          <Display />\n        </Suspense>\n      </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AACA,SAASA,cAAc,EAAEC,YAAY,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC7F,SAASC,YAAY,QAAQ,YAAY;AACzC,SAASC,aAAa,QAAQ,mCAAmC;AACjE,SAASC,IAAI,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAAA;AACvC,MAAMC,OAAO,gBAAGF,IAAI,MAAC,MAAM,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAAA,MAApDE,OAAO;AACb,MAAMC,MAAM,GAAG,IAAIT,YAAY,CAAC;EAC9BU,KAAK,EAAE,IAAIT,aAAa,EAAE;EAC1BU,IAAI,EAAE,IAAIT,QAAQ,CAAC;IACjBU,GAAG,EAAE;EACP,CAAC;AACH,CAAC,CAAC;AACF,MAAMC,IAAI,GAAG,IAAIX,QAAQ,CAAC;EACxBU,GAAG,EAAE;AACP,CAAC,CAAC;AACF,MAAME,EAAE,GAAG,IAAIT,aAAa,CAACD,YAAY,CAAC;EACxCW,GAAG,EAAE;AACP,CAAC,CAAC,CAAC;AAEH,MAAMC,SAAS,GAAGb,KAAK,CACpB;EAACc;AAAK,CAAC,CACT;AAED,SAASC,GAAG,GAAG;EACb,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,uBAClB,QAAC,cAAc;MAAC,MAAM,EAAET,MAAO;MAAA,uBAC7B,QAAC,QAAQ;QAAC,QAAQ,eAAE;UAAA,UAAE;QAAU,iBAAI;QAAA,uBAClC,QAAC,OAAO;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA;IACF;MAAA;MAAA;MAAA;IAAA;EACI;IAAA;IAAA;IAAA;EAAA,QACb;AAEV;AAAC,MAVQS,GAAG;AAYZ,eAAeA,GAAG;AAAC;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}