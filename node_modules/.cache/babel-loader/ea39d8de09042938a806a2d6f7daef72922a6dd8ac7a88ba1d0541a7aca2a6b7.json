{"ast":null,"code":"var _jsxFileName = \"/Users/kerj/Projects/gql-hasura/src/components/Table.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchGraphQL(operationsDoc, operationName, variables) {\n  const result = await fetch(\"http://localhost:8080/v1/graphql\", {\n    method: \"POST\",\n    body: JSON.stringify({\n      query: operationsDoc,\n      variables: variables,\n      operationName: operationName\n    })\n  });\n  return await result.json();\n}\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\nfunction fetchGetCustomers() {\n  return fetchGraphQL(operationsDoc, \"GetCustomers\", {});\n}\nconst startFetchGetCustomers = async () => {\n  const {\n    errors,\n    data\n  } = await fetchGetCustomers();\n  if (errors) {\n    console.error(errors);\n  }\n  // do something great with this precious data\n  return data.data.customers;\n};\nexport const Table = () => {\n  _s();\n  const [results, setResults] = React.useState([]);\n  const headers = results ? Object.keys(results[0]) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tableContainer\",\n    style: {\n      color: 'black'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          className: \"tr\",\n          children: headers.map(header => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: header\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 53\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: (results || []).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: headers.map((header, ind) => /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"td\",\n            children: row[header]\n          }, ind, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 41\n          }, this))\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(Table, \"QYmH5xyAMv1uIO9V7tguRx7oNwo=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","fetchGraphQL","operationsDoc","operationName","variables","result","fetch","method","body","JSON","stringify","query","json","fetchGetCustomers","startFetchGetCustomers","errors","data","console","error","customers","Table","results","setResults","useState","headers","Object","keys","color","map","header","row","index","ind"],"sources":["/Users/kerj/Projects/gql-hasura/src/components/Table.tsx"],"sourcesContent":["import React from 'react'\n\nasync function fetchGraphQL(operationsDoc: any, operationName: any, variables: any) {\n    const result = await fetch(\n        \"http://localhost:8080/v1/graphql\",\n        {\n            method: \"POST\",\n            body: JSON.stringify({\n                query: operationsDoc,\n                variables: variables,\n                operationName: operationName\n            })\n        }\n    );\n\n    return await result.json();\n}\n\nconst operationsDoc = `\n  query GetCustomers {\n    customers(limit: 10) {\n      email_address\n      first_name\n      last_name\n    }\n  }\n`;\n\nfunction fetchGetCustomers() {\n    return fetchGraphQL(\n        operationsDoc,\n        \"GetCustomers\",\n        {}\n    );\n}\n\nconst startFetchGetCustomers = async (): Promise<any[]> => {\n    const { errors, data } = await fetchGetCustomers();\n\n    if (errors) {\n        console.error(errors);\n    }\n    // do something great with this precious data\n    return data.data.customers;\n}\n\nexport const Table = () => {\n    const [results, setResults] = React.useState<any[]>([]);\n\n    \n\n    const headers: any[] = results ? Object.keys(results[0]) : [];\n    return (\n        <div className='tableContainer' style={{ color: 'black' }}>\n            {\n                <table className='table'>\n                    <thead>\n                        <tr className='tr'>\n                            {headers.map(header => (<th>{header}</th>))}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {\n                            (results || []).map((row, index) => (\n                                <tr key={index}>\n                                    {headers.map((header, ind) => (\n                                        <td key={ind} className=\"td\">\n                                            {row[header]}\n                                        </td>\n                                    ))}\n                                </tr>\n                            ))\n                        }\n                    </tbody>\n                </table>\n            }\n        </div>\n    )\n}\n\nexport default Table;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,eAAeC,YAAY,CAACC,aAAkB,EAAEC,aAAkB,EAAEC,SAAc,EAAE;EAChF,MAAMC,MAAM,GAAG,MAAMC,KAAK,CACtB,kCAAkC,EAClC;IACIC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACjBC,KAAK,EAAET,aAAa;MACpBE,SAAS,EAAEA,SAAS;MACpBD,aAAa,EAAEA;IACnB,CAAC;EACL,CAAC,CACJ;EAED,OAAO,MAAME,MAAM,CAACO,IAAI,EAAE;AAC9B;AAEA,MAAMV,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,SAASW,iBAAiB,GAAG;EACzB,OAAOZ,YAAY,CACfC,aAAa,EACb,cAAc,EACd,CAAC,CAAC,CACL;AACL;AAEA,MAAMY,sBAAsB,GAAG,YAA4B;EACvD,MAAM;IAAEC,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMH,iBAAiB,EAAE;EAElD,IAAIE,MAAM,EAAE;IACRE,OAAO,CAACC,KAAK,CAACH,MAAM,CAAC;EACzB;EACA;EACA,OAAOC,IAAI,CAACA,IAAI,CAACG,SAAS;AAC9B,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAM;EAAA;EACvB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGtB,KAAK,CAACuB,QAAQ,CAAQ,EAAE,CAAC;EAIvD,MAAMC,OAAc,GAAGH,OAAO,GAAGI,MAAM,CAACC,IAAI,CAACL,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;EAC7D,oBACI;IAAK,SAAS,EAAC,gBAAgB;IAAC,KAAK,EAAE;MAAEM,KAAK,EAAE;IAAQ,CAAE;IAAA,uBAElD;MAAO,SAAS,EAAC,OAAO;MAAA,wBACpB;QAAA,uBACI;UAAI,SAAS,EAAC,IAAI;UAAA,UACbH,OAAO,CAACI,GAAG,CAACC,MAAM,iBAAK;YAAA,UAAKA;UAAM;YAAA;YAAA;YAAA;UAAA,QAAO;QAAC;UAAA;UAAA;UAAA;QAAA;MAC1C;QAAA;QAAA;QAAA;MAAA,QACD,eACR;QAAA,UAEQ,CAACR,OAAO,IAAI,EAAE,EAAEO,GAAG,CAAC,CAACE,GAAG,EAAEC,KAAK,kBAC3B;UAAA,UACKP,OAAO,CAACI,GAAG,CAAC,CAACC,MAAM,EAAEG,GAAG,kBACrB;YAAc,SAAS,EAAC,IAAI;YAAA,UACvBF,GAAG,CAACD,MAAM;UAAC,GADPG,GAAG;YAAA;YAAA;YAAA;UAAA,QAGf;QAAC,GALGD,KAAK;UAAA;UAAA;UAAA;QAAA,QAOjB;MAAC;QAAA;QAAA;QAAA;MAAA,QAEF;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QAEV;AAEd,CAAC;AAAA,GAhCYX,KAAK;AAAA,KAALA,KAAK;AAkClB,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}